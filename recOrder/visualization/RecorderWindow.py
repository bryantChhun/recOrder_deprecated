# bchhun, {2019-07-29}

from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QFileDialog

from ..visualization import VisualizeBase
from ..datastructures import BackgroundData
from .qtdesigner.ReconOrderUI import Ui_ReconOrderUI
from recOrder.microscope.mm2python_simple import snap_and_get_image, py4j_collect_background, py4j_snap_and_correct

"""
Ui_ReconOrderUI is generated by qtdesigner.
To generate a new .py file from the designer's .ui file, type this in terminal

pyuic5 -x <.ui input file> -o <.py output file>

"""


"""
A pyqt5 GUI that contains methods for 
"""


class RecorderWindow(VisualizeBase, Ui_ReconOrderUI):

    def __init__(self, win, gateway=None):
        super(RecorderWindow, self).__init__()

        self.setupUi(win)

        # button's signals
        self.qbutton_snap_and_correct.clicked[bool].connect(self.snap)
        self.qbutton_collect_background.clicked[bool].connect(self.collect_background)
        self.qbutton_file_browser.clicked[bool].connect(self.file_browser)
        self.start_monitor.clicked[bool].connect(self.launch_monitor)
        self.qbutton_stop_monitor.clicked[bool].connect(self.stop_monitor)

        self.qbutton_calibrate_lc.clicked[bool].connect(self.calibrate)

        self.gate = gateway
        self.gate.entry_point.clearAll()

        # some params
        self.lc_bound = 0.05
        self.swing = float(self.le_swing.text())
        self.I_black = 100
        self.wavelength = int(self.le_wavelength.text())

        # data
        self.Background = BackgroundData()
        self.Background.channel_names = ['IExt', 'I90', 'I135', 'I45', 'I0']

        win.show()

    @pyqtSlot(bool)
    def file_browser(self):
        name = self.openFileNameDialog()
        self.le_bg_corr_path.setText(name)

    def openFileNameDialog(self):
        options = QFileDialog.Options()

        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self, "QFileDialog.getOpenFileName()", "",
                                                  "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            return fileName

    # =============================================================
    # ==================== ReconstructOrder methods ===============

    # because qbutton sends another parameter: bool, we need *args
    @VisualizeBase.emitter(channel=13)
    def snap(self, *args):
        try:
            self.gate.entry_point.clearAll()
            data = snap_and_get_image(self.gate.entry_point, self.gate.getStudio())
            return data
        except Exception as ex:
            print("exception during snap\n\t"+str(ex))

    @VisualizeBase.emitter(channel=13)
    def snap_and_correct(self, *args):
        self.log_area.append("calling snap and correct")
        self.gate.entry_point.clearAll()

        physical_corrected = py4j_snap_and_correct(self.gateway, self.Background)

        return physical_corrected

    @VisualizeBase.emitter(channel=13)
    def collect_background(self, *args):
        """
        Collects Intensity images at each polstate, averaged by 'averaging'.
        Computes Stokes and physical, and assigns these all to Background Data Structure
        Then writes these images to disk if a save path is supplied
        Then generates a metadata structure
        Parameters
        ----------
        args

        Returns
        -------

        """
        try:
            self.gate.entry_point.clearAll()
            path = None if not self.le_bg_corr_path.text() else self.le_bg_corr_path.text()
            self.Background = py4j_collect_background(self.gateway,
                                                      self.Background,
                                                      self.swing,
                                                      self.wavelength,
                                                      self.I_black,
                                                      save_path=path,
                                                      averaging=5)
        except Exception as ex:
            print("exception during collect background \n\t"+str(ex))
        return self.Background

    @VisualizeBase.emitter(channel=10)
    def launch_monitor(self, *args):
        pass

    @VisualizeBase.emitter(channel=19)
    def stop_monitor(self):
        pass

    # =============================================================
    # ================ Calibration methods ========================

    @VisualizeBase.emitter(channel=20)
    def calibrate(self, *args):
        self.gate.entry_point.clearAll()
        self.clear_text_fields()
        return [self.swing, self.wavelength, self.lc_bound, self.I_black]

    # @VisualizeBase.emitter(channel=27)
    # def reset_lc(self, *args):
    #     return None

    def clear_text_fields(self):
        self.le_state0_lca.setText('')
        self.le_state0.lcb.setText('')
        self.le_state1_lca.setText('')
        self.le_state1.lcb.setText('')
        self.le_state2_lca.setText('')
        self.le_state2.lcb.setText('')
        self.le_state3_lca.setText('')
        self.le_state3.lcb.setText('')
        self.le_state4_lca.setText('')
        self.le_state4.lcb.setText('')

        self.le_state0_intensity.setText('')
        self.le_state1_intensity.setText('')
        self.le_state2_intensity.setText('')
        self.le_state3_intensity.setText('')
        self.le_state4_intensity.setText('')

        self.le_extinction.setText('')


    @VisualizeBase.receiver(channel=21)
    def le_state0(self, lc):
        self.le_state0_lca.setText(str(lc[0]))
        self.le_state0_lcb.setText(str(lc[1]))
        self.le_state0_intensity.setText(str(lc[2]))

    @VisualizeBase.receiver(channel=22)
    def le_state1(self, lc):
        self.le_state1_lca.setText(str(lc[1]))
        self.le_state1_lcb.setText(str(lc[2]))
        self.le_state1_intensity.setText(str(lc[0]))

    @VisualizeBase.receiver(channel=23)
    def le_state2(self, lc):
        self.le_state2_lca.setText(str(lc[0]))
        self.le_state2_lcb.setText(str(lc[1]))
        self.le_state2_intensity.setText(str(lc[2]))

    @VisualizeBase.receiver(channel=24)
    def le_state3(self, lc):
        self.le_state3_lca.setText(str(lc[0]))
        self.le_state3_lcb.setText(str(lc[1]))
        self.le_state3_intensity.setText(str(lc[2]))

    @VisualizeBase.receiver(channel=25)
    def le_state4(self, lc):
        self.le_state4_lca.setText(str(lc[0]))
        self.le_state4_lcb.setText(str(lc[1]))
        self.le_state4_intensity.setText(str(lc[2]))

    @VisualizeBase.receiver(channel=26)
    def le_extinction_update(self, value):
        self.le_extinction.setText(str(value))

